Thymol
======

Thymol is a javascript implementation of certain key parts of Thymeleaf functionality, providing static support for Thymeleaf's include, substituteby, if, unless and switch attributes.

Download thymol [here](http://sourceforge.net/projects/jjbenson.u/files/thymol/).

Overview
--------

[Thymeleaf](http://www.thymeleaf.org) is a very powerful, but amenable html/xml templating framework with easily accessible Spring MVC support. 

One of Thymeleaf's most attractive features is that Thymeleaf enhanced html files are implicitly viewable as static prototypes i.e. you can inspect a Thymeleaf template via a browser using file|open and see a reasonable representation of it's content without any connection to a live web container.

Unfortunately, Thymeleaf's control flow attributes don't work very well for static pages, that's what inspired Thymol.

Thymol was created in order to provide a more accurate static representation of Thymeleaf's dynamic templating capabilities by offering rudimentary support for Thmyeleaf's include, substituteby, if, unless and switch attributes.     

Usage
-----

Simply download and unzip the thymol distribution file, and place the file "thymol.js" in a directory accessible by your web project (changing the src path below as appropriate). Do the same for the jquery source, or use a remote URI.

Then insert the following (or something similar) into your html source:

    <!-- embed example -->
    <script th:remove="all" type="text/javascript" src="http://code.jquery.com/jquery.min.js"></script>
    <script th:remove="all" type="text/javascript" src="js/thymol.js"></script>

You can obtain the jquery library [here](http://code.jquery.com).

Static Imports
--------------

Here is an example of a template intended for static import:

    <!--footer.html-->
	<!DOCTYPE html>
	<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
		<body>
			<div th:fragment="copy" style="color: green;">&#169; 2011 The Good Thymes Virtual Grocery</div>
		</body>
	</html>

Here is an example snippet using the footer.html template:

    <!--main.html-->
		<body>
		...
			<div th:include="footer::copy">
				cannot load template: footer, fragment: copy
			</div>
		...
		</body>

For a more complete example and further explanation please visit [static-imports].

Thymeleaf Conditionals
----------------------

Thymol also provides support for static prototyping of Thymeleaf conditional statements i.e. th:if, th:unless and th:switch. These have the same effect in your template as described in the Thymeleaf documentation (see [7 CONDITIONAL EVALUATION](http://www.thymeleaf.org/documentation.html)).

The major limitation of the Thymol implementation of conditionals is the level of support for the use of expression variables.

Thymol treats all Thymeleaf expressions #{...}, ${...} and *{...} in exactly the same way, as if they were ${...}. 
 
At the present time, the only way to define the value of an expression variable is through the use of request parameters attached to the URL by which the static template is invoked.

Request parameters are specified by using the usual "http get" mechanism:

	file:///C:/Users/jjb/project/big-example/page5.html?firstName=Fred&surName=Bloggs
	


The only expression evaluation that will be performed is a very simple evaluation as a boolean (as specified by Thymeleaf's ObjectUtils.evaluateAsBoolean() function).

The only operator that is recognised is the unary not operator, specified by prefixing an expression with a '!' character.

The expression evaluation/operator functionality that is supported is sufficient for a very basic th:if and th:unless capability.

The Thymol implementation of th:switch is capable of comparing the value of an expression variable against a set of literal text values, that's all. This functionality is intended to emulate that described in [7.2 SWITCH STATEMENTS](http://www.thymeleaf.org/documentation.html).    

Unrecognised expressions in th:if/th:unless cause the fragment to be always shown, in a th:switch or any it's enclosed th:case statements, any unrecognised expression will cause all the options to be shown.

Debug Mode
----------

Thymol includes very basic debugging facility. When running in debug mode, Thymol will open an alert window each time an unrecognisable conditional expression is encountered or whenever an include/substituteby template cannot be opened.
To enable debug mode, you should either define a javascript variable called "thDebug" and set it's value to "true" or add a request parameter named "thDebug" and set it's value to "true".

	<script th:remove="all" type="text/javascript">
	//<![CDATA[
           var thDebug = true;
	//]]>
 	</script>
 	
 	or:

	file:///C:/Users/jjb/project/big-example/page5.html?firstName=Fred&surName=Bloggs&thDebug=true
	
In the case where a value for thDebug is defined by both a javascript variable and a request parameter, the value supplied as a request parameter will take precedence.
	 
Template Resolution
-------------------

One of the many useful features of Thymeleaf is the TemplateResolver, the mechanism by which templates are located in a web application.
At the moment, Thymol has no such facility but takes a much simpler approach.

A Thymeleaf template locator takes the form: "template-name::fragment-name".

Thymol treats all template-name references as relative file locations, they will be relative to either a (user) defined root directory or relative to the enclosing file's directory location. 
    
After parameter processing, Thymol resolves template locators as follows:

	If a template-name starts with a period character ('.'), the entire URI is treated as a path relative to the directory of the template containing the reference.
	
	e.g. template-name values like "./pages/header/foobar" or "../parent/sibling1/other" are treated as child or cousin directory tree references as the host operating system would treat them.
		
	If a template-name doesn't start with a '.', but it contains no path separator characters ('/'), it's also treated as relative to the enclosing file's directory.
	
	e.g. template-name references like "family" are treated as siblings of the current template, "dynasty/bloggs" are treated as being relative to root.

	All other template-name values are considered to be root relative references. 

Root Directory Specification
----------------------------

Thymol provides two parameters that are used to specify the location to be applied to root relative resolved templates. These parameters are thRoot and thPath. Like other Thymol parameters, they may be set as javascript variables or (more unusually) as request parameters.

When a root relative path is required during template resolution, Thymol uses the concatenation of thRoot + thPath + template-name + ".html" to construct the final file URI.

The usual way of defining these values is by setting either or both values in javascript source file(s) and importing the file(s).

     Content of file "setThPath.js" :

	<script th:remove="all" type="text/javascript">
    	  var thRoot="D:/projects/thymol/distr/Webcontent";
	  var thPath="examples/thymol-example/hierarchy";
	</script>

     and in your template:

       	<script th:remove="all" type="text/javascript" src="../assets/js/setThPath.js"></script>


    
It's common practice to use separate files to set thRoot and thPath, using thRoot as a project wide setting, and thPath to set a finer grain value for groups of related files within a project.

Browser Constraints
-------------------
As Thymol is intended for use in a static (non web container) environment, it uses "file:" protocol URIs to access templates.
The accessibility of referenced templates is subject to the constraints imposed by the javascript host within which Thymol is being executed, this is normally a web-browser.
To view Thymeleaf templates using Thymol your browser must be configured to allow access to local (file-store) files.

Firefox:

	"go into your FF 3.0 config panel (type 'about:config') and set the following property to 'false' by double clicking on it: security.fileuri.strict_origin_policy"

(Thanks to http://jquery-howto.blogspot.co.uk/2008/12/access-to-restricted-uri-denied-code.html)

Chrome:

The simplest way to enable local file access is to add the "allow-file-access-from-files" command line parameter to your Chrome start-up command:

	e.g. <path-to-chrome-home>chrome.exe --allow-file-access-from-files

Internet Explorer:

	Local file access is enabled by default by Internet Explorer

(Need to take advice on configuring Safari, Opera etc..)
 
Known Limitations of include/substituteby
-----------------------------------------

You cannot use th:substituteby to replace the content of the head element of an html file using the Chrome browser, if possible, use th:include instead.


General Limitations
-------------------

0) This document attempts to describe the behaviour of the current latest version of Thymol - at present this is thymol-0.1.2.

1) The specification parts of th:include or th:substituteby (i.e. the "template-name::fragment-name" part), may contain expressions, but any template/fragment delimiter ("::") must be part of the static content of the specifier.

2) Only simple expressions may be used in any Thymol processed Thymeleaf attributes. For example, "template-name::`[domselector]`" variants of the th:include or th:substituteby specification are not processed by thymol.

3) I make no claim about the quality of my javascript programming or my knowledge of jquery!

If time allows and demand is sufficient some progress may be made on alleviating the effects of limitations 1 and 2, any contributed code and/or bug fixes from users would be much appreciated. However, only time will tell if I will ever make any headway on point 3.

Download
--------

You can obtain the latest version of thymol [here](http://sourceforge.net/projects/jjbenson.u/files/thymol/).