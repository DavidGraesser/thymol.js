
	function getFilePart(part) {
		var result = substitute(part);
		var isPath = result.indexOf('/') >= 0;
		if( result.charAt(0) != '.' ) {	// Initial period indicates a relative path
			if( isPath ) {	// if there are no path separators, it's also treated as relative
				result = thProtocol + root + path + result;	// This is how we treat absolute resource paths													
			}
		}
		return result;
	}

Thymeleaf provides a very flexible and comprehensive mechanism for defining the location of templates within a Thymeleaf application using the TemplateResolver interface.
Thymol however, has very limited but (hopefully) adequate capabilities in this respect.

As Thymol is intended for use in a static (non web container) environment, it uses "file:" protocol URIs to access templates. The accessibility of referenced templates is subject to all of the constraints
imposed by the javascript host within which Thymol is being executed.

If you're viewing Thymol templates using one the more popular web browsers: Firefox, Chrome or IE, then there is a good chance that your templates will be rendered correctly if you ahere to the following guidelines:



After parameter processing, template locators are processed as follows:

    All templatename references are treated as either relative or absolute 

	If a templatename starts with a period character ('.'), the entire URI is treated as a relative path rooted at the (absolute) path of the template that the reference appears in.
	
		e.g. templatename values like "./pages/header/foobar" or "../parent/sibling1/other" are treated as child or cousin directory tree references as the host operating system would treat them.
		
	If a templatename doesn't start with a '.', but it contains no path separator characters ('/'), it's also treated as relative.
	
	    e.g. templatename references like "family" are treated as a siblings of the current template, "dynasty/bloggs" are treated as being relative to root. 


