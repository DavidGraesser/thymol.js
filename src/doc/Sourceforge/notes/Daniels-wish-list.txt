Expressions would only be executed wherever they affect layout: th:include, th:substituteby, th:if, th:unless, th:switch.

1. #{...}, ${...} and *{...} expressions will be executed in exactly the same way, as if they were ${...} 
2.Request parameters (written as URL parameters after ? at the browser location bar) should be parsed in javascript
 --jQuery probably has tools for parsing window.location-- and these parameters will be used for evaluation of expressions. 
3. For example, a <div th:if="${user.admin}"> will be displayed if you add "?user.admin=true" to the URL.
4. Boolean evaluation would be done in javascript in a way equivalent to Thymeleaf's ObjectUtils.evaluateAsBoolean(). 
5. Only simple expressions would be understood. "Simple" expressions are those like "${something.something.something}", not containing conditionals, 
elvis operators, equal/not equal/greater than/etc. operators, etc. Just the evaluation of a variable name --nested or not.

Future versions of Thymol could support parsing some more advanced types of expressions, for example, conditionals and equality operators..

There should be a way to easily activate a "debug" mode in Thymol. 
If in debug mode, every expression in th:include, th:if, etc. that is not understood will raise an alert to the developer, explaining that such expression is not going to be evaluated.
If in execution mode --or whichever name you prefer--, this won't happen. This should be the default mode.

Non-understood expressions in th:include/th:substituteby cause the non-substitution of the fragment. 
In th:if/th:unless cause the fragment to be always shown. 
In th:switch or any of its th:case cause all the options to be shown.




